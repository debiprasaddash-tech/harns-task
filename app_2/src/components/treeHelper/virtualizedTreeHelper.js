import { doc } from "./temp";
import _ from "lodash";

const LogPacketType = [
  "0x1007",
  "0x106E",
  "0x1071",
  "0x107C",
  "0x118A",
  "0x119B",
  "0x1277",
  "0x12A1",
  "0x12B6",
  "0x4005",
  "0x4125",
  "0x4127",
  "0x412F",
  "0x5071",
  "0x512F",
  "0x5130",
  "0x5134",
  "0x51FC",
  "0x5B2F",
  "0x5B30",
  "0x5B34",
  "0x7130",
  "0x7131",
  "0x7135",
  "0x713A",
  "0xB0C0",
  "0xB0C1",
  "0xB0C2",
  "0xB0E2",
  "0xB0E3",
  "0xB0EC",
  "0xB0ED",
  "0xB0EE",
  "0xB0E5",
  "0xB0A0",
  "0xB0B0",
  "0xB0B1",
  "0xB0A2",
  "0xB0B2",
  "0xB0A3",
  "0xB0B3",
  "0xB0A4",
  "0xB0B4",
  "0xB0A5",
  "0xB0B5",
  "0xB060",
  "0xB061",
  "0xB062",
  "0xB063",
  "0xB064",
  "0xB066",
  "0xB067",
  "0xB091",
  "0xB081",
  "0xB092",
  "0xB082",
  "0xB097",
  "0xB087",
  "0xB16F",
  "0xB16E",
  "0xB16B",
  "0xB173",
  "0xB179",
  "0xB185",
  "0xB187",
  "0xB188",
  "0xB18A",
  "0xB18E",
  "0xB192",
  "0xB193",
  "0xB195",
  "0xB198",
  "0xB1A1",
  "0xB1A2",
  "0xB121",
  "0xB126",
  "0xB130",
  "0xB132",
  "0xB139",
  "0xB13C",
  "0xB14D",
  "0xB14E",
  "0x1FEB",
  "0x156E",
  "0x17F2",
  "0x1830",
  "0x1831",
  "0x1832",
  "0x1C00",
  "0x1C07",
  "0x1C08",
  "0x1C09",
  "0x1C0C",
  "0x1C0F",
  "0xB800",
  "0xB801",
  "0xB80A",
  "0xB80B",
  "0xB80E",
  "0xB80F",
  "0xB810",
  "0xB811",
  "0xB812",
  "0xB813",
  "0xB814",
  "0xB821",
  "0xB822",
  "0xB823",
  "0xB825",
  "0xB826",
  "0xB840",
  "0xB841",
  "0xB842",
  "0xB84B",
  "0xB84C",
  "0xB84D",
  "0xB84E",
  "0xB857",
  "0xB858",
  "0xB860",
  "0xB861",
  "0xB868",
  "0xB869",
  "0xB870",
  "0xB871",
  "0xB872",
  "0xB880",
  "0xB881",
  "0xB883",
  "0xB884",
  "0xB885",
  "0xB886",
  "0xB887",
  "0xB888",
  "0xB889",
  "0xB88A",
  "0xB890",
  "0xB891",
  "0xB896",
  "0xB89B",
  "0xB89C",
  "0xB8A0",
  "0xB8A7",
  "0xB8C9",
  "0xB8D1",
  "0xB8D2",
  "0xB950",
  "0xB951",
  "0xB952",
  "0xB96D",
  "0xB96E",
  "0xB96F",
  "0xB975",
  "0xB97F",
  "0xB981",
  "0xB98B",
  "0xB992",
  "0xB9A4",
  "0xB9A5",
  "0xB9A7",
  "0xB9BE",
  "0xB9BF"
];

export const constructTree = (data, level = 0) => {
  const doc = prepareTreeData(data);
  console.log(doc);
  const haveChildren = !_.isArray(data);
  const depth = level + 1;
  return Object.keys(data).map((key, index) => {
    const item = data[key];
    const name = haveChildren ? key : item;
    const children = haveChildren ? constructTree(item, depth) : [];
    return {
      id: `${name}${index}`,
      label: name,
      value: name,
      level: level,
      isLeaf: !haveChildren,
      children
    };
  });
};

export const prepareTreeData = () => {
  const items = [];
  LogPacketType.forEach((item) => {
    if (doc.findIndex((docItem) => docItem.value === item) === -1) {
      items.push(item);
    }
  });

  console.log("items", items, doc.length, LogPacketType.length);
};
